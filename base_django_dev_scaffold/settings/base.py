"""
Django settings for base_django_dev_scaffold project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import logging.config
import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-b(%nd+g-18%&5(s_ve$6x80xyfi*7sias17r6*dw(fmjhmx353"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "simpleui",
    "django_comment_migrate",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "apps.system.apps.SystemConfig",
    "apps.oauth.apps.OauthConfig",
    "rest_framework",
    "rest_framework_simplejwt",
    "captcha",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # "utils.c_middleware.token_exception.TokenExceptionMiddleware",
]

ROOT_URLCONF = "base_django_dev_scaffold.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "base_django_dev_scaffold.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
        "NAME": "django-miniapp",
        'USER': os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        'OPTIONS': {'charset': 'utf8mb4'},
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# rest framework 设置
REST_FRAMEWORK = {
    # 认证
    'DEFAULT_AUTHENTICATION_CLASSES': ['rest_framework_simplejwt.authentication.JWTAuthentication', ],

    # 权限
    'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated', ],

    # 全局配置异常模块
    'EXCEPTION_HANDLER': "utils.c_restframework.c_exception.custom_exception_handler",

    # 修改默认返回JSON的renderer的类
    # "DEFAULT_RENDERER_CLASSES": ("utils.c_restframework.c_renderer.custom_renderer",),

    # 全局分页
    'DEFAULT_PAGINATION_CLASS': "utils.c_restframework.c_pagination.MyPageNumberPagination",
    'PAGE_SIZE': 50,  # 这是每页显示的数目

    # 全局接口版本
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",  # 正则形式
    "ALLOWED_VERSIONS": ["v1"],  # 允许的版本
    "VERSION_PARAM": "version",  # 参数
    "DEFAULT_VERSION": "v1",  # 默认版本
}

AUTH_USER_MODEL = "system.Users"

LOGGING_CONFIG = None  # This empties out Django's logging config
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "()": "colorlog.ColoredFormatter",
            "format": "%(log_color)s %(levelname)-8s %(asctime)s %(request_id)s  %(process)s --- "
                      "%(lineno)-8s [%(name)s] %(funcName)-24s : %(message)s",
            "log_colors": {
                "DEBUG": "blue",
                "INFO": "white",
                "WARNING": "yellow",
                "ERROR": "red",
                "CRITICAL": "bold_red",
            },
        },
        "simple": {
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "filters": {
        "request_id": {"()": "log_request_id.filters.RequestIDFilter"},
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
            "filters": ["request_id"],
        },
    },
    "loggers": {
        # Default logger for any logger name
        "": {
            "level": "INFO",
            "handlers": ["console", ],
            "propagate": False,
        },
        # Logger for django server logs with django.server logger name
        "django.server": {
            "level": "DEBUG",
            "handlers": ["console", ],
            "propagate": False,
        },
    },
}
logging.config.dictConfig(LOGGING)  # Finally replace our config in python logging

# simple-ui 配置
SIMPLEUI_LOGO = 'https://i.328888.xyz/2023/03/20/Pz1EL.png'  # 去掉默认的系统图标
# 隐藏右侧SimpleUI广告链接和使用分析# 认Logo或换成自己Logo链接
SIMPLEUI_HOME_INFO = False
SIMPLEUI_ANALYSIS = False
# 设置默认主题，指向主题css文件名。Admin Lte风格
SIMPLEUI_DEFAULT_THEME = 'admin.lte.css'
# SIMPLEUI_CONFIG = {
#     # 开启排序和过滤功能, 不填此字段为默认排序和全部显示, 空列表[] 为全部不显示.
#     'menu_display': ['系统设置', ],
# }
# 系统默认的菜单图标，注意key名为菜单上实际显示的名字，不是模型或App名。
# SIMPLEUI_ICON = {
#     '系统设置': 'fa-solid fa-gears',
#     # '用户管理': 'fas fa-user-tie',
#     # '图片管理': 'fa-solid fa-image'
# }


# SIMPLE_JWT 配置

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),  # 认证的标签头，类似jwt token中的jwt
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',  # 身份验证的授权标头名称
}

AUTHENTICATION_BACKENDS = (
    'utils.c_auth_backend.backend.MyModelBackendBackend',
)

# django simple captcha 配置
CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.math_challenge'  # 验证码类型， 简单算术
CAPTCHA_TIMEOUT = 60 * 24  # 验证码过期时间，单位：分钟

# django cache
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": [
            f"redis://{os.getenv('REDIS_HOST')}:{os.getenv('REDIS_PORT', 6379)}/{os.getenv('REDIS_DB')}",
        ],
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": os.getenv("REDIS_PASSWORD")
        }
    },
    'session': {  # 缓存session
        'BACKEND': 'django_redis.cache.RedisCache',  # 缓存后端 Redis
        # 连接Redis数据库(服务器地址)
        # 一主带多从(可以配置多个Redis，写走第一台，读走其他的机器)
        "LOCATION": [
            f"redis://{os.getenv('REDIS_HOST')}:{os.getenv('REDIS_PORT', 6379)}/{os.getenv('REDIS_DB')}",
        ],
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": os.getenv("REDIS_PASSWORD"),
            'CONNECTION_POOL_KWARGS': {'decode_responses': True},  # 添加这一行,防止取出的值带有b'' bytes
        }
    },
    'verify_codes': {  # 缓存短信验证码
        'BACKEND': 'django_redis.cache.RedisCache',  # 缓存后端 Redis
        # 连接Redis数据库(服务器地址)
        # 一主带多从(可以配置多个Redis，写走第一台，读走其他的机器)
        "LOCATION": [
            f"redis://{os.getenv('REDIS_HOST')}:{os.getenv('REDIS_PORT', 6379)}/{os.getenv('REDIS_DB')}",
        ],
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": os.getenv("REDIS_PASSWORD"),
            'CONNECTION_POOL_KWARGS': {'decode_responses': True},  # 添加这一行,防止取出的值带有b'' bytes
        }
    },
    "authapi": {  # 接口安全校验（验证接口重复第二次访问会拒绝）
        'BACKEND': 'django_redis.cache.RedisCache',  # 缓存后端 Redis
        # 连接Redis数据库(服务器地址)
        # 一主带多从(可以配置多个Redis，写走第一台，读走其他的机器)
        "LOCATION": [
            f"redis://{os.getenv('REDIS_HOST')}:{os.getenv('REDIS_PORT', 6379)}/{os.getenv('REDIS_DB')}",
        ],
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": os.getenv("REDIS_PASSWORD"),
            'CONNECTION_POOL_KWARGS': {'decode_responses': True},  # 添加这一行,防止取出的值带有b'' bytes
        }
    },
    "singletoken": {  # jwt单用户登录（确保一个账户只有一个地点登录，后一个会顶掉前一个）
        'BACKEND': 'django_redis.cache.RedisCache',  # 缓存后端 Redis
        # 连接Redis数据库(服务器地址)
        # 一主带多从(可以配置多个Redis，写走第一台，读走其他的机器)
        "LOCATION": [
            f"redis://{os.getenv('REDIS_HOST')}:{os.getenv('REDIS_PORT', 6379)}/{os.getenv('REDIS_DB')}",
        ],
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',  # 连接选项(默认，不改)
            "PASSWORD": os.getenv("REDIS_PASSWORD"),
            'CONNECTION_POOL_KWARGS': {'decode_responses': True},  # 添加这一行,防止取出的值带有b'' bytes
        }
    },
}

# Celery 配置
# =========================================
# Celery 配置 (官方建议小写)
# =========================================
CELERY_BROKER_URL = os.getenv("BROKER_URL")
CELERY_timezone = "Asia/Shanghai"
CELERY_ENABLE_UTC = False
CELERY_BEAT_SCHEDULER = "redbeat.RedBeatScheduler"
# 一次预取多少消息乘以并发进程数。默认值为 4。
# 如果您有许多短期运行的任务，并且吞吐量 / 往返延迟对您很重要，那么这个数字应该很大。
# 如果消息已经被预取并且在内存中可用，则工作人员每秒能够处理更多任务。您可能需要进行试验才能找到最适合您的价值。
# 在这些情况下，像50或150这样的值可能有意义。说64或128。
CELERY_WORKER_PREFETCH_MULTIPLIER = int(os.getenv("WORKER_PREFETCH_MULTIPLIER") or 1)
# 每个worker 执行的最大任务数，达到以后销毁重新建立新的worker
CELERY_WORKER_MAX_TASKS_PER_CHILD = 100
# 工作人员在被新工作人员替换之前可能消耗的最大驻留内存量（以千字节为单位）。如果单个任务导致工人超过此限制，则任务将完成，之后将更换工人。
# worker_max_memory_per_child = 12000  # 12MB
# 执行任务的并发工作进程 / 线程 / 绿色线程的数量。
CELERY_WORKER_CONCURRENCY = int(os.getenv("WORKER_CONCURRENCY") or 4)
# 以秒为单位的任务时间限制。超过此值时，处理任务的worker将被杀死并用新的worker替换。
CELERY_TASK_TIME_LIMIT = 60

# delivery_mode = 1， 消息仅保留在内存里，重启丢失。
# delivery_mode = 2， 消息保存在内存和硬盘里，重启不丢失，默认值。
# CELERY_TASK_QUEUES = (
#     Queue('alarm_task', Exchange('alarm_task', delivery_mode=1), routing_key='alarm_task', durable=False),
#     Queue('diagnosis_task', Exchange('diagnosis_task', delivery_mode=1), routing_key='diagnosis_task',
#           durable=False),
#
# )
#
# CELERY_TASK_ROUTES = {
#     'alarm.tasks.equipment_alarm': {'queue': 'alarm_task', 'routing_key': 'alarm_task'},
#     'diagnosis.tasks.auto_diagnosis': {'queue': 'diagnosis_task', 'routing_key': 'diagnosis_task'},
#
# }


# 定时任务
CELERY_BEAT_SCHEDULE = {
    'add-every-30-seconds': {
        'task': 'apps.system.tasks.delete_expired_captcha',
        'schedule': 30.0,
    },

    'add-every-5-seconds': {
        'task': 'apps.system.tasks.add',
        'schedule': 5.0,
        'args': (16, 16)
    },

}

# =========================================
# redbeat 设置 (小写)
# =========================================
redbeat_redis_url = os.getenv("REDBEAT_REDIS_URL")
redbeat_lock_key = None
beat_max_loop_interval = 10  # 监听频率，秒
# 在定时任务数量大的时候，如果无法在锁超时时间内send完毕所有的任务。
# 则会出现  【Cannot release a lock that's no longer owned】的错误
# redbeat_lock_timeout 必须要大beat 调度所有的任务的时间。
redbeat_lock_timeout = int(
    os.getenv("REDBEAT_LOCK_TIMEOUT") or beat_max_loop_interval * 60)  # 锁超时，秒 【暂定为 10 * 60】 10分钟
